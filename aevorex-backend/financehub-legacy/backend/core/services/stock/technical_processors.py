"""
Technical Analysis Data Processors

This module contains the core.gic for calculating various technical indicators
and processing the resulting data. It's used by the TechnicalService.
"""

import pandas as pd

# ---------------------------------------------------------------------------
# pandas_ta 0.xx expects `numpy.NaN` alias that was removed in numpy>=2.0.
# To maintain compatibility without pinning an old numpy we create the alias
# *before* pandas_ta is imported.  This is a no-op for numpy<2.0 and safe for
# newer versions.
# ---------------------------------------------------------------------------
import numpy as _np  # noqa: N813  # keep underscore prefix internal

if not hasattr(_np, "NaN"):
    # Alias added for backward-compatibility with pandas_ta and similar libs
    _np.NaN = _np.nan  # type: ignore[attr-defined]

try:
    import pandas_ta as ta  # noqa: F401  # optional heavy dependency
except Exception as import_exc:  # pragma: no cover – optional
    # Log once and continue; technical indicators will be skipped.
    import warnings

    warnings.warn(
        f"pandas_ta unavailable ({import_exc}); technical indicator features disabled.",
        RuntimeWarning,
    )
    ta = None  # type: ignore[assignment]
from typing import Any

from backend.utils.logger_config import get_logger

logger = get_logger("aevorex_finbot.TechnicalProcessor")


class TechnicalProcessor:
    """
    Handles the calculation and processing of technical indicators.
    """

    def calculate_all_indicators(self, ohlcv_df: pd.DataFrame) -> pd.DataFrame | None:
        """
        Calculates a standard set of technical indicators using pandas_ta.
        """
        if ohlcv_df is None or ohlcv_df.empty:
            logger.warning("OHLCV DataFrame is empty, cannot calculate indicators.")
            return None

        try:
            # Create a new DataFrame for indicators to avoid modifying the original
            indicators_df = ohlcv_df.copy()

            if ta is None:
                logger.warning(
                    "pandas_ta not installed – skipping indicator calculation."
                )
                return None

            # Use the pandas_ta library to apply a strategy
            custom_strategy = ta.Strategy(
                name="Aevorex Standard",
                description="Standard set of indicators for FinBot analysis.",
                ta=[
                    {"kind": "sma", "length": 20},
                    {"kind": "sma", "length": 50},
                    {"kind": "sma", "length": 200},
                    {"kind": "ema", "length": 20},
                    {"kind": "ema", "length": 50},
                    {"kind": "rsi"},
                    {"kind": "macd"},
                    {"kind": "bbands"},
                    {"kind": "obv"},
                    {"kind": "stoch"},
                    {"kind": "adx"},
                    {"kind": "cci"},
                    {"kind": "atr"},
                ],
            )

            # Apply the strategy to the DataFrame
            indicators_df.ta.strategy(custom_strategy)

            logger.info(
                f"Successfully calculated {len(custom_strategy.ta)} types of indicators."
            )
            return indicators_df

        except Exception as e:
            logger.error(f"Error during indicator calculation: {e}", exc_info=True)
            return None

    def extract_latest_values(self, indicators_df: pd.DataFrame) -> dict[str, Any]:
        """
        Extracts the most recent value for each calculated indicator.
        """
        if indicators_df is None or indicators_df.empty:
            return {}

        try:
            # Get the last row of the DataFrame
            latest = indicators_df.iloc[-1]

            # Convert the Series to a dictionary and filter out non-indicator columns
            latest_dict = latest.to_dict()

            # Filter to include only columns generated by pandas_ta
            indicator_columns = [
                col
                for col in indicators_df.columns
                if col.upper()
                not in ["OPEN", "HIGH", "LOW", "CLOSE", "VOLUME", "TICKER"]
            ]

            # Convert all numeric values to native Python float to avoid JSON serialization
            # errors caused by NumPy dtypes (e.g. numpy.float64). Skip NaN/None values and
            # any entries that are not convertible to ``float``.
            latest_indicators: dict[str, float] = {}
            for key, value in latest_dict.items():
                if key not in indicator_columns:
                    continue  # Not a technical indicator column
                if pd.isna(value):  # Handles NaN/None gracefully
                    continue
                try:
                    latest_indicators[key] = float(value)
                except Exception:  # pragma: no cover – skip uncastable types
                    continue

            logger.debug(f"Extracted {len(latest_indicators)} latest indicator values.")
            return latest_indicators

        except Exception as e:
            logger.error(
                f"Error extracting latest indicator values: {e}", exc_info=True
            )
            return {}

    async def process_ohlcv_data(
        self, ohlcv_data: Any, request_id: str
    ) -> list[dict[str, Any]] | None:
        """Process raw OHLCV data into chart-ready format."""
        try:
            # Use existing mappers to convert to chart format
            from ....core import mappers

            if hasattr(ohlcv_data, "to_dict"):  # DataFrame
                return mappers.map_yfinance_ohlcv_df_to_chart_list(
                    ohlcv_data, request_id
                )
            else:  # Dict or other format
                return mappers.map_eodhd_data_to_chart_ready_format(ohlcv_data)

        except Exception as e:
            logger.error(f"[{request_id}] OHLCV processing failed: {e}", exc_info=True)
            return None

    def validate_technical_data(self, data: dict[str, Any]) -> bool:
        """Validate technical analysis data structure."""
        required_fields = ["indicators", "latest_indicators"]
        return all(field in data for field in required_fields)

    def format_indicator_summary(
        self, latest_indicators: dict[str, float | None]
    ) -> dict[str, Any]:
        """Format indicator data for summary display."""
        return {
            "momentum": {
                "rsi": latest_indicators.get("rsi"),
                "macd": latest_indicators.get("macd"),
                "macd_signal": latest_indicators.get("macd_signal"),
            },
            "trend": {
                "sma_20": latest_indicators.get("sma_20"),
                "sma_50": latest_indicators.get("sma_50"),
                "ema_12": latest_indicators.get("ema_12"),
                "ema_26": latest_indicators.get("ema_26"),
            },
            "volatility": {
                "bollinger_upper": latest_indicators.get("bollinger_upper"),
                "bollinger_middle": latest_indicators.get("bollinger_middle"),
                "bollinger_lower": latest_indicators.get("bollinger_lower"),
            },
        }
